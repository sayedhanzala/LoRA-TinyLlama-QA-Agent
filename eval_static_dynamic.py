# -*- coding: utf-8 -*-
"""Agent_QnA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1klb1VSwtIIJgooJRTOdiPzLRRCkXRSSq
"""

!python agent.py

!cat logs/trace.jsonl

## Static Evaluation (Comparing Base vs Fine-Tuned)

from datetime import datetime
from transformers import AutoTokenizer, pipeline
from peft import AutoPeftModelForCausalLM

# Fine-tuned model
adapter_path = "adapter"
finetuned_tokenizer = AutoTokenizer.from_pretrained(adapter_path)
finetuned_tokenizer.pad_token = finetuned_tokenizer.eos_token

finetuned_model = AutoPeftModelForCausalLM.from_pretrained(
    adapter_path,
    device_map="auto",
    torch_dtype="auto"
)
finetuned_pipe = pipeline("text-generation", model=finetuned_model, tokenizer=finetuned_tokenizer)

# Base model
base_model_id = "TinyLlama/TinyLlama_v1.1"
base_tokenizer = AutoTokenizer.from_pretrained(base_model_id)
base_tokenizer.pad_token = base_tokenizer.eos_token
base_model_pipe = pipeline("text-generation", model=base_model_id, tokenizer=base_tokenizer)


prompts = [
    "How to install a package using pip?",
    "How to uninstall a package?",
    "How to list files in a directory?",
    "How to change ownership of a directory?",
    "How to create a virtual environment?",
    "How to remove a virtual environment?",
    "How to clone a git repository?",
    "How to create a branch in git?"
]

timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")

with open("eval_static.md", "w", encoding="utf-8") as f:
    f.write(f"# Static Evaluation Report\n")
    f.write(f"**Date & Time:** {timestamp} (UTC)\n\n")
    f.write("| Prompt # | Prompt | Base Model Output | Fine-Tuned Output |\n")
    f.write("|----------|--------|-------------------|--------------------|\n")

    for i, prompt in enumerate(prompts):
        full_prompt = f"### Question:\n{prompt}\n\n### Answer:\n"
        base_output = base_model_pipe(full_prompt, max_new_tokens=100)[0]["generated_text"]
        fine_output = finetuned_pipe(full_prompt, max_new_tokens=100)[0]["generated_text"]

        base_ans = base_output.split("### Answer:")[-1].strip().replace("\n", " ")
        fine_ans = fine_output.split("### Answer:")[-1].strip().replace("\n", " ")

        # Escape markdown pipe symbols if present
        base_ans = base_ans.replace("|", "¦")
        fine_ans = fine_ans.replace("|", "¦")

        f.write(f"| {i+1} | {prompt} | {base_ans} | {fine_ans} |\n")

!pip install rouge_score

## Dynamic Evaluation

from rouge_score import rouge_scorer

# Define a scorer
scorer = rouge_scorer.RougeScorer(['rougeL'], use_stemmer=True)

# Reference and output pairs
references = [
    "To install a package using pip, use: pip install <package-name>",
    "To uninstall a package using pip: pip uninstall <package-name>",
    "To list files in a directory: use the command `ls` (Linux/macOS) or `dir` (Windows)",
    "Use `sudo chown -R username:groupname /path/to/directory` to change ownership",
    "Use `python -m venv env` and activate it with `source env/bin/activate`",
    "Just delete the environment folder or use `rm -rf env` (Linux/macOS)",
    "Use `git clone <repo-url>` to clone a repository"
]

base_outputs = [
    "Install the package using pip install package",
    "First install the package then uninstall using pip uninstall <package_name>",
    "Listing files in a directory: $ ls",
    "Use chown to change ownership",
    "Create a virtualenv with virtualenv venv and activate with source venv/bin/activate",
    "Remove the virtual environment by running pip3.6 uninstall virtualenv",
    "See cloning a git repository"
]

finetuned_outputs = [
    "You can install a package using: pip install <package-name>",
    "You can uninstall a package using: pip uninstall <package-name>",
    "`ls` lists the files in a directory. Example: ls -l",
    "Change ownership using: sudo chown -R user:user /path/to/dir",
    "To create a virtual environment: python -m venv env && source env/bin/activate",
    "To remove a virtual environment, just delete its folder using rm -rf env",
    "To clone a git repository: git clone https://github.com/user/repo.git"
]

# Compute ROUGE-L scores
def avg_rougeL(outputs):
    scores = [scorer.score(ref, pred)["rougeL"].fmeasure for ref, pred in zip(references, outputs)]
    return sum(scores) / len(scores)

base_avg = avg_rougeL(base_outputs)
finetuned_avg = avg_rougeL(finetuned_outputs)

print("Base ROUGE-L avg:", round(base_avg, 3))
print("Fine-tuned ROUGE-L avg:", round(finetuned_avg, 3))